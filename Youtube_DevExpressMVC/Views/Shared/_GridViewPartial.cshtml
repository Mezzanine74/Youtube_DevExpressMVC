
@using YoutubeDevExpressMVC.Web.Models.Db
@model IEnumerable<YoutubeDevExpressMVC.Web.Models.Db.IEntity>

@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        var controller = ViewBag.ControllerName;

        settings.Name = controller.ToString() +  "GridView";

        settings.CallbackRouteValues = new { Controller = controller, Action = "GridViewPartial" };

        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = controller, Action = "GridViewPartialAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = controller, Action = "GridViewPartialUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = controller, Action = "GridViewPartialDelete" };
        settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
        settings.SettingsBehavior.ConfirmDelete = true;

        settings.DataBound = (sender, e) =>
        {
            MVCxGridView grd = sender as MVCxGridView;
            if (grd.Columns.IndexOf(grd.Columns["CommandColumn"]) != -1)
                return;
            GridViewCommandColumn col = new GridViewCommandColumn();
            col.Name = "CommandColumn";
            grd.Columns.Add(col);
            col.VisibleIndex = 0;
            col.ShowNewButtonInHeader = true;
            col.ShowDeleteButton = true;
            col.ShowEditButton = true;
        };

        settings.CommandColumn.Visible = false;

        settings.KeyFieldName = "Id";


        // Prepare FK and Navigation Properties
        var modelType = Model.GetType().GetGenericArguments()[0];
        var PropertiesArray = modelType.GetProperties();

        dynamic repo = Activator.CreateInstance(
            typeof(YoutubeDevExpressMVC.Web.Helpers.FKandNavigationFromModel<>)
                .MakeGenericType(typeof(YoutubeDevExpressMVC.Web.Models.Db.Product) // hedeflenen assembly de herhangi bir class
                .Assembly
                .GetType(modelType.FullName, true)) // modelin tipi eg"Mulakat.Data.db.Personel"
            , Model.ToList()[0]);

        var list = repo.GetList() as List<YoutubeDevExpressMVC.Web.Helpers.FKandNavigationProperty>;

        foreach (var item in PropertiesArray)
        {
            // if FK column
            if (list.Any(c => c.FK.Equals(item.Name)))
            {

                var fKandNavigationProperty = list.FirstOrDefault(c => c.FK.Equals(item.Name));

                // add combo box
                settings.Columns.Add(column =>
                {
                    column.FieldName = fKandNavigationProperty.FK;
                    column.Caption = fKandNavigationProperty.Navigation.PropertyType.Name;
                    column.EditorProperties().ComboBox(p =>
                    {
                        p.TextField = fKandNavigationProperty.TextField;
                        p.ValueField = fKandNavigationProperty.ValueField;

                        p.ValueType = typeof(int);
                        p.DataSource = fKandNavigationProperty.Repo;
                    });
                });

            }
            else
            {
                // tum kolonlari ekle, yoksa editte hata veriyor
                var col = settings.Columns.Add(item.Name);

                var dataAttribute = (System.ComponentModel.DataAnnotations.DataTypeAttribute)Attribute.GetCustomAttribute(item, typeof(System.ComponentModel.DataAnnotations.DataTypeAttribute));

                if (dataAttribute != null)
                {
                    if (dataAttribute.DataType == System.ComponentModel.DataAnnotations.DataType.DateTime)
                    {
                        col.ColumnType = MVCxGridViewColumnType.DateEdit;
                    }

                    if (dataAttribute.DataType == System.ComponentModel.DataAnnotations.DataType.MultilineText)
                    {
                        col.ColumnType = MVCxGridViewColumnType.Memo;
                    }
                }

                if (
                    // (many relation)
                    item.PropertyType.Name.Contains("ICollection") ||
                    // FK ise (one relation)
                    item.GetMethod.IsVirtual)
                {
                    col.Visible = false;

                }
            }

        }

        settings.CellEditorInitialize = (s, e) =>
        {
            ((ASPxEdit)e.Editor).ValidationSettings.Display = Display.Dynamic;
            ((ASPxEdit)e.Editor).ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText;
        };

    }
        );
}

@grid.Bind(Model).GetHtml()

